name: Planning and apply infrastructure

on:
  workflow_run:
    workflows: ["Deploy ingestion lambda image"]
    types: 
      - completed
  pull_request:
    branches:
      - main
    types: [opened, synchronize]
  push:
    branches:
      - main

jobs:
  planning:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    defaults:
      run:
        working-directory: ${{ vars.TF_ACTIONS_WORKING_DIR }}
    permissions:
      pull-requests: write
    steps:
    - uses: actions/checkout@v3
    - uses: hashicorp/setup-terraform@v3
    - uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
    - name: Get the image URI from the build job
      run: |
        IMAGE_DIGEST=$(aws ecr describe-images --repository-name ${{ vars.INGESTION_LAMBDA_ECR }} --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageDigest' --output text)
        echo "INGESTION_IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY@$IMAGE_DIGEST" >> "$GITHUB_ENV"
    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      run: terraform plan -var="ingestion_lambda_image_uri=${{ env.INGESTION_IMAGE }}" -no-color
      continue-on-error: true

    - uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
          })

          // 2. Prepare format of the comment
          const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
          #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

          // 3. If we have a comment, update it, otherwise create a new one
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }
  apply:
    defaults:
      run:
        working-directory: ${{ vars.TF_ACTIONS_WORKING_DIR }}
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Get the image URI from the build job
      run: |
        IMAGE_DIGEST=$(aws ecr describe-images --repository-name ${{ vars.INGESTION_LAMBDA_ECR }} --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageDigest' --output text)
        echo "INGESTION_IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY@$IMAGE_DIGEST" >> "$GITHUB_ENV"
    - name: Terraform Apply
      run: |
        terraform init
        terraform apply -var="ingestion_lambda_image_uri=${{ env.INGESTION_IMAGE }}" -no-color -auto-approve